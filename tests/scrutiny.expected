
Note: in local procedure `c',
  in local procedure `b',
  in toplevel procedure `a':
  expected value of type boolean in conditional but were given a value of type
  `number' which is always true:

(if x 1 2)

Warning: in toplevel procedure `foo':
  branches in conditional expression differ in the number of results:

(if x (values 1 2) (values 1 2 (+ (+ ...))))

Warning: at toplevel:
  (scrutiny-tests.scm:15) in procedure call to `bar', expected argument #2 of type `number', but was given an argument of type `symbol'

Warning: at toplevel:
  (scrutiny-tests.scm:17) in procedure call to `string?', expected 1 argument, but was given 0 arguments

Warning: at toplevel:
  expected in argument #1 of procedure call `(print (cpu-time))' a single result, but were given 2 results

Warning: at toplevel:
  expected in argument #1 of procedure call `(print (values))' a single result, but were given zero results

Warning: at toplevel:
  (scrutiny-tests.scm:23) in procedure call to `x', expected a value of type `(procedure () *)', but was given a value of type `fixnum'

Warning: at toplevel:
  (scrutiny-tests.scm:25) in procedure call to `+', expected argument #1 of type `number', but was given an argument of type `symbol'

Warning: at toplevel:
  (scrutiny-tests.scm:25) in procedure call to `+', expected argument #2 of type `number', but was given an argument of type `symbol'

Warning: at toplevel:
  assignment of value of type `fixnum' to toplevel variable `car' does not match declared type `(forall (a175) (procedure car ((pair a175 *)) a175))'

Warning: at toplevel:
  expected in `let' binding of `g8' a single result, but were given 2 results

Warning: at toplevel:
  in procedure call to `g8', expected a value of type `(procedure () *)', but was given a value of type `fixnum'

Note: in toplevel procedure `foo':
  expected value of type boolean in conditional but were given a value of type
  `(procedure bar30 () *)' which is always true:

(if bar 3 (##core#undefined))

Warning: in toplevel procedure `foo2':
  (scrutiny-tests.scm:54) in procedure call to `string-append', expected argument #1 of type `string', but was given an argument of type `number'

Warning: at toplevel:
  (scrutiny-tests.scm:62) in procedure call to `foo3', expected argument #1 of type `string', but was given an argument of type `fixnum'

Warning: in toplevel procedure `foo4':
  (scrutiny-tests.scm:67) in procedure call to `+', expected argument #1 of type `number', but was given an argument of type `string'

Warning: in toplevel procedure `foo5':
  (scrutiny-tests.scm:73) in procedure call to `+', expected argument #1 of type `number', but was given an argument of type `string'

Warning: in toplevel procedure `foo6':
  (scrutiny-tests.scm:79) in procedure call to `+', expected argument #1 of type `number', but was given an argument of type `string'

Warning: at toplevel:
  (scrutiny-tests.scm:86) in procedure call to `+', expected argument #1 of type `number', but was given an argument of type `string'

Warning: in toplevel procedure `foo10':
  (scrutiny-tests.scm:100) in procedure call to `foo9', expected argument #1 of type `string', but was given an argument of type `number'

Warning: in toplevel procedure `foo10':
  (scrutiny-tests.scm:101) in procedure call to `+', expected argument #1 of type `number', but was given an argument of type `string'

Note: in toplevel procedure `foo10':
  expression returns a result of type `string', but is declared to return `pair', which is not a subtype

Warning: in toplevel procedure `foo10':
  (scrutiny-tests.scm:105) in procedure call to `string-append', expected argument #1 of type `string', but was given an argument of type `pair'

Warning: in toplevel procedure `foo10':
  expression returns 2 values but is declared to have a single result

Note: in toplevel procedure `foo10':
  expression returns a result of type `fixnum', but is declared to return `*', which is not a subtype

Warning: in toplevel procedure `foo10':
  expression returns zero values but is declared to have a single result of type `*'

Warning: in toplevel procedure `foo10':
  (scrutiny-tests.scm:108) in procedure call to `*', expected argument #1 of type `number', but was given an argument of type `string'

Warning: in toplevel procedure `foo#blabla':
  (scrutiny-tests.scm:133) in procedure call to `+', expected argument #2 of type `number', but was given an argument of type `symbol'

Warning: at toplevel:
  use of deprecated `deprecated-procedure'

Warning: at toplevel:
  use of deprecated `another-deprecated-procedure' - consider `replacement-procedure'

Warning: at toplevel:
  (scrutiny-tests.scm:158) in procedure call to `apply1', expected argument #2 of type `(list-of number)', but was given an argument of type `(list symbol fixnum fixnum)'

Warning: at toplevel:
  (scrutiny-tests.scm:159) in procedure call to `apply1', expected argument #2 of type `(list-of number)', but was given an argument of type `(list symbol fixnum fixnum)'

Note: at toplevel:
  (scrutiny-tests.scm:172) in procedure call to `fixnum?', the predicate is called with an argument of type
  `fixnum' and will always return true

Note: at toplevel:
  (scrutiny-tests.scm:180) in procedure call to `symbol?', the predicate is called with an argument of type
  `(or char string)' and will always return false

Note: at toplevel:
  (scrutiny-tests.scm:184) in procedure call to `char-or-string?', the predicate is called with an argument of type
  `fixnum' and will always return false

Note: at toplevel:
  (scrutiny-tests.scm:185) in procedure call to `symbol?', the predicate is called with an argument of type
  `(or char string)' and will always return false

Note: at toplevel:
  (scrutiny-tests.scm:186) in procedure call to `string?', the predicate is called with an argument of type
  `fixnum' and will always return false

Note: at toplevel:
  (scrutiny-tests.scm:190) in procedure call to `symbol?', the predicate is called with an argument of type
  `char' and will always return false

Note: at toplevel:
  (scrutiny-tests.scm:191) in procedure call to `string?', the predicate is called with an argument of type
  `symbol' and will always return false

Note: at toplevel:
  (scrutiny-tests.scm:195) in procedure call to `symbol?', the predicate is called with an argument of type
  `(or char string)' and will always return false

Note: at toplevel:
  (scrutiny-tests.scm:196) in procedure call to `string?', the predicate is called with an argument of type
  `symbol' and will always return false

Warning: redefinition of standard binding: car
